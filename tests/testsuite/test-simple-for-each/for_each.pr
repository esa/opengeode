--  Header file for function TaskWithLoop in SDL language
--  Component type : FALSE
--  Instance of :
--  Generated by TASTE on 2022-01-17 14:36:23
--  Context Parameters present : NO
--  Provided interfaces : trigger
--  Required interfaces :
--  User-defined properties for this function:
--     * TASTE::Is_Component_Type = false
--     * TASTE_IV_Properties::FPGA_Configurations = AllModes
--  DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
/* CIF Keep Specific Geode ASNFilename 'dataview-uniq.asn' */
use Datamodel;

system Taskwithloop;

   signal check_variable(MyData);
   signal check_fixed(MyArray);
   signal check_child(MyRecord);
   signal nested;
   signal result(MyInteger);

   channel c
      from env to Taskwithloop with check_variable, check_fixed, check_child, nested;
	  from Taskwithloop to env with result;
   endchannel;

   block Taskwithloop;

      signalroute r
          from env to Taskwithloop with check_variable, check_fixed, check_child, nested;
	      from Taskwithloop to env with result;
      connect c and r;

      /* CIF PROCESS (250, 150), (150, 75) */
process Taskwithloop;
    /* CIF TEXT (664, 109), (267, 140) */
    DCL result_param MyInteger;
	DCL variable_param MyData;
	DCL fixed_param MyArray;
	DCL child_param MyRecord;
	DCL nested_param MyNested;
    /* CIF ENDTEXT */
    /* CIF START (320, 10), (70, 35) */
    START;
        /* CIF NEXTSTATE (320, 60), (70, 35) */
        NEXTSTATE Wait;
    /* CIF state (450, 10), (70, 35) */
    state Wait;
        /* CIF input (450, 65), (70, 35) */
        input check_variable(variable_param);
            /* CIF task (450, 120), (70, 35) */
            task result_param := 0;
            /* CIF task (402, 170), (164, 72) */
            task for each in variable_param:
result_param := result_param + each
endfor;
		    output result(result_param);
            /* CIF NEXTSTATE (450, 273), (70, 35) */
            NEXTSTATE Wait;
    endstate;
    /* CIF state (450, 10), (70, 35) */
    state Wait;
        /* CIF input (450, 65), (70, 35) */
        input check_fixed(fixed_param);
            /* CIF task (450, 120), (70, 35) */
            task result_param := 0;
            /* CIF task (402, 170), (164, 72) */
            task for each in fixed_param:
result_param := result_param + each
endfor;
		    output result(result_param);
            /* CIF NEXTSTATE (450, 273), (70, 35) */
            NEXTSTATE Wait;
	endstate;
    /* CIF state (450, 10), (70, 35) */
    state Wait;
        /* CIF input (450, 65), (70, 35) */
        input check_child(child_param);
            /* CIF task (450, 120), (70, 35) */
            task result_param := 0;
            /* CIF task (402, 170), (164, 72) */
            task for each in child_param.data:
result_param := result_param + each
endfor;
		    output result(result_param);
            /* CIF NEXTSTATE (450, 273), (70, 35) */
            NEXTSTATE Wait;
	endstate;
    state Wait;
        /* CIF input (450, 65), (70, 35) */
        input nested;
            /* CIF task (450, 120), (70, 35) */
            task result_param := 0;
            /* CIF task (2231, 420), (136, 68) */
            task nested_param := {
{2,2,2,2,2,2,2,2,2,2},
{3,3,3,3,3,3,3,3,3,3}
};
            /* CIF task (2195, 536), (208, 83) */
            task for a in nested_param:
for b in a:
result_param := result_param + b
endfor
endfor;
		    output result(result_param);
            /* CIF NEXTSTATE (450, 273), (70, 35) */
            NEXTSTATE Wait;
	endstate;

endprocess Taskwithloop;
   endblock;
endsystem;
