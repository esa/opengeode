system toto;
    /* CIF Keep Specific Geode Partition 'default' */
    /* CIF TEXT (810, 226), (267, 140) */
    -- Text area for declarations and comments
    use dataview comment 'dataview.asn';
    
    signal hello;
    /* CIF ENDTEXT */
    channel c
        from env to toto with hello;
    endchannel;
    block toto;
        signalroute r
            from env to toto with hello;
        connect c and r;
        /* CIF PROCESS (400, 132), (150, 75) */
        process toto;
            /* CIF Keep Specific Geode Partition 'default' */
            /* CIF TEXT (693, 124), (366, 140) */
            -- Model used to demonstrate how to work with enumerated
            -- and choice determinants
            
            dcl val MyChoice,  det MyEnum;
            
            dcl choice_selectors mychoice_selection := foo;
            
            dcl pos MyInt;
            /* CIF ENDTEXT */
            /* CIF START (240, 89), (70, 35) */
            START;
                /* CIF task (169, 144), (210, 35) */
                task choice_selectors := present(val);
                /* CIF decision (225, 199), (99, 50) */
                decision present (val);
                    /* CIF ANSWER (195, 269), (70, 23) */
                    (foo):
                    /* CIF ANSWER (285, 269), (70, 23) */
                    (bar):
                enddecision;
                /* CIF decision (225, 308), (99, 50) */
                decision present (val);
                    /* CIF ANSWER (169, 378), (120, 23) */
                    (choice_selectors):
                    /* CIF ANSWER (315, 378), (70, 23) */
                    else:
                enddecision;
                /* CIF decision (214, 417), (120, 50) */
                decision choice_selectors;
                    /* CIF ANSWER (225, 487), (96, 23) */
                    (present(val)):
                    /* CIF ANSWER (346, 487), (70, 23) */
                    else:
                enddecision;
                /* CIF task (235, 526), (79, 35) */
                task det := foo;
                /* CIF task (215, 578), (118, 35) */
                task pos := num (det);
                /* CIF PROCEDURECALL (150, 633), (249, 35) */
                call writeln ('1. num: ', pos, ' (should be 0)');
                /* CIF task (196, 683), (156, 35) */
                task choice_selectors := bar;
                /* CIF task (125, 738), (299, 35) */
                task choice_selectors := to_selector (det, MyChoice);
                /* CIF PROCEDURECALL (83, 793), (382, 35) */
                call writeln ('2. to_selector: ',choice_selectors, ' (should be FOO)');
                /* CIF task (235, 848), (79, 35) */
                task det := bar;
                /* CIF task (135, 898), (278, 35) */
                task det := to_enum (choice_selectors, MyEnum);
                /* CIF PROCEDURECALL (127, 953), (294, 35) */
                call writeln ('3. to_enum: ', det, ' (should be FOO)');
                /* CIF task (235, 1008), (79, 35) */
                task det := bar;
                /* CIF task (125, 1063), (299, 35) */
                task choice_selectors := to_selector (det, MyChoice);
                /* CIF PROCEDURECALL (84, 1118), (381, 35) */
                call writeln ('4. to_selector:', choice_selectors, ' (should be BAR)');
                /* CIF task (235, 1173), (79, 35) */
                task det := foo;
                /* CIF task (135, 1228), (278, 35) */
                task det := to_enum (choice_selectors, MyEnum);
                /* CIF PROCEDURECALL (128, 1283), (292, 35) */
                call writeln ('5. to_enum: ', det, ' (should be BAR)');
                /* CIF task (198, 1338), (152, 35) */
                task det := val (0, MyEnum)
                /* CIF comment (371, 1338), (116, 35) */
                comment 'convert 0 to foo';
                /* CIF PROCEDURECALL (147, 1393), (255, 35) */
                call writeln ('6. val: ',det, ' (should be FOO)');
                /* CIF NEXTSTATE (240, 1443), (70, 35) */
                NEXTSTATE hop;
            /* CIF state (528, 360), (70, 35) */
            /* CIF Keep Specific Geode Partition 'default' */
            state hop;
            endstate;
        endprocess toto;
    endblock;
endsystem;