/* CIF PROCESS (295, 56), (150, 75) */
process orchestrator
/* CIF comment (405, 192), (70, 35) */
comment 'Hello';
    /* CIF Keep Specific Geode Partition 'default' */
    /* CIF TEXT (0, 0), (270, 188) */
    -- GNC Orchestrator for the VEGA simulator
    
    DCL gnc_output T_GNC_LV_SIM_INPUTS;
    
    DCL gnc_input T_GNC_LV_SIM_CONTEXT;
    
    DCL intr T_INTR;
    
    DCL plot_data T_Plot;
    dcl seq tastE_Peek_id_list := {1};
    
    DCL major_cycle, sub_cycle T_UInt32;
    /* CIF ENDTEXT */
    /* CIF START (314, 134), (100, 45) */
    START;
        /* CIF task (291, 194), (144, 35) */
        task seq := seq // {2} // {1};
        /* CIF PROCEDURECALL (279, 244), (168, 38) */
        call writeln
('[Orchestrator] Startup');
        /* CIF task (300, 297), (126, 35) */
        task intr := obt_pulse4;
        /* CIF output (322, 347), (82, 35) */
        output telemetry;
        /* CIF task (304, 397), (119, 38) */
        task major_cycle := 1,
sub_cycle := 0;
        /* CIF NEXTSTATE (313, 450), (101, 35) */
        NEXTSTATE Wait_for_GUI;
    /* CIF state (691, 222), (101, 35) */
    /* CIF Keep Specific Geode Partition 'default' */
    state Wait_for_GUI;
        /* CIF input (683, 277), (119, 38) */
        input start_simulation
(gnc_input);
            /* CIF PROCEDURECALL (656, 330), (173, 38) */
            call writeln
('[Orchestrator] Running');
            /* CIF NEXTSTATE (707, 383), (71, 35) */
            NEXTSTATE Running;
    endstate;
    /* CIF state (483, 211), (71, 35) */
    /* CIF Keep Specific Geode Partition 'running' */
    state Running;
        /* CIF input (731, 266), (119, 38) */
        input start_simulation
(gnc_input)
        /* CIF comment (873, 260), (142, 38) */
        comment 'Input from gui
stops the simulation';
            /* CIF NEXTSTATE (740, 319), (101, 35) */
            NEXTSTATE Wait_for_GUI;
        /* CIF input (296, 266), (70, 35) */
        input pulse
        /* CIF comment (386, 258), (93, 35) */
        comment 'Periodic call';
            /* CIF PROCEDURECALL (146, 316), (369, 38) */
            call S_SET_GNC_LV_SIM_CONTEXT_FOR_NEXT_MAJOR_CYCLE
(gnc_input)
            /* CIF comment (534, 301), (153, 68) */
            comment 'Set data computed
by the Simulink model
(Simulator) in the GNC
input vector';
            /* CIF PROCEDURECALL (290, 369), (81, 38) */
            call Scheduler
(intr)
            /* CIF comment (392, 363), (149, 35) */
            comment 'Call the GNC function';
            /* CIF PROCEDURECALL (152, 422), (357, 38) */
            call S_GET_GNC_LV_SIM_INPUTS_FOR_NEXT_MAJOR_CYCLE
(gnc_output)
            /* CIF comment (531, 416), (156, 38) */
            comment 'Read output data
from the GNC function';
            /* CIF PROCEDURECALL (248, 475), (164, 38) */
            call VESAT_Simulation_Step
(gnc_output, gnc_input)
            /* CIF comment (434, 469), (161, 35) */
            comment 'Call the Simulink model';
            /* CIF decision (250, 528), (161, 53) */
            decision major_cycle mod 50 = 0
and
sub_cycle = 0
            /* CIF comment (432, 529), (229, 38) */
            comment 'Plot only every 50 major cycles
(otherwise performance is too low)';
                /* CIF ANSWER (237, 601), (70, 23) */
                (true):
                    /* CIF task (147, 639), (250, 68) */
                    task plot_data!major_cycle := major_cycle,
plot_data!subcycle := sub_cycle mod 7,
plot_data!gnc_inputs := gnc_input,
plot_data!gnc_outputs := gnc_output;
                    /* CIF output (216, 722), (112, 35) */
                    output plot(plot_data);
                /* CIF ANSWER (432, 601), (70, 23) */
                (false):
            enddecision;
            /* CIF decision (280, 835), (100, 50) */
            decision sub_cycle = 7
            /* CIF comment (402, 834), (176, 35) */
            comment 'Compute next major cycle';
                /* CIF ANSWER (148, 905), (70, 23) */
                (true):
                    /* CIF task (52, 943), (263, 38) */
                    task sub_cycle := 0,
major_cycle := (major_cycle + 1) mod 100;
                    /* CIF PROCEDURECALL (69, 996), (228, 35) */
                    call S_JUMP_TO_NEXT_MAJOR_CYCLE;
                /* CIF ANSWER (428, 905), (70, 23) */
                (false):
                    /* CIF task (345, 943), (237, 35) */
                    task sub_cycle := (sub_cycle + 1) mod 100;
            enddecision;
            /* CIF NEXTSTATE (295, 1067), (71, 35) */
            NEXTSTATE Running;
    endstate;
endprocess orchestrator;