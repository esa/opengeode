system og;
    /* CIF Keep Specific Geode Partition 'default' */
    /* CIF TEXT (159, 221), (267, 140) */
    -- Text area for declarations and comments
    
    use dv comment 'dataview.asn';
    
    signal run;
    signal saved_signal(BoolType);
    signal we;
    /* CIF ENDTEXT */
    channel c
        from env to og with run,
saved_signal;
        from og to env with we;
    endchannel;
    block og;
        signalroute r
            from env to og with run,
saved_signal;
            from og to env with we;
        connect c and r;
        /* CIF PROCESS (225, 50), (150, 75) */
        process og;
            /* CIF Keep Specific Geode Partition 'default' */
            /* CIF TEXT (827, 171), (464, 188) */
            --  Provide an implementation of the check_queue function
            -- for the test. This function is normally provided by the TASTE runtime
            -- when there is a pending message in the input queue of the thread.
            -- But to allow testing without a TASTE runtime we need to provide 
            -- a custom implementation of this function which just returns false.
            -- note, this currently only works for the Ada backend. The C backend
            -- adds a prefix and this function ends up being named og_PI_og_check_queue
            exported procedure og_check_queue;
            fpar in/out res  boolType;
            start;
            task res := false;
            endprocedure;
            /* CIF ENDTEXT */
            /* CIF Keep Specific Geode Partition 'default' */
            /* CIF TEXT (150, 75), (371, 140) */
            --  Demonstrate how to simulate the behaviour of the SAVE
            -- signal. The actual SAVE implies dynamic memory allocation.
            -- But using a controlled-size array and a continuous signal it
            -- is easy to reproduce the same behaviour.
            
            dcl save_buffer SeqOf;
            
            dcl param BoolType;
            /* CIF ENDTEXT */
            /* CIF procedure (13, 163), (97, 35) */
            /* CIF Keep Specific Geode Partition 'default' */
            procedure GET_PARAM;
                /* CIF Keep Specific Geode Partition 'default' */
                /* CIF TEXT (341, 385), (267, 140) */
                -- Text area for declarations and comments
                
                dcl idx myinteger := 0;
                /* CIF ENDTEXT */
                /* CIF START (153, 81), (70, 35) */
                START;
                    /* CIF task (106, 131), (162, 35) */
                    task param := save_buffer(0);
                    /* CIF task (90, 181), (196, 35) */
                    task idx := length (save_buffer) - 1;
                    /* CIF task (57, 236), (260, 38) */
                    task save_buffer := if length(save_buffer) > 1
then save_buffer(1, idx) else {} fi;
                    /* CIF return (170, 289), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (8, 106), (104, 35) */
            /* CIF Keep Specific Geode Partition 'default' */
            procedure SAVE_PARAM;
                /* CIF Keep Specific Geode Partition 'default' */
                /* CIF TEXT (1, 27), (170, 140) */
                fpar in param BoolType;
                /* CIF ENDTEXT */
                /* CIF START (146, 192), (70, 28) */
                START;
                    /* CIF decision (110, 238), (141, 50) */
                    decision length(save_buffer);
                        /* CIF ANSWER (53, 308), (70, 23) */
                        (<10):
                            /* CIF task (10, 346), (154, 38) */
                            task save_buffer :=
save_buffer // {param};
                        /* CIF ANSWER (253, 308), (70, 23) */
                        (10):
                            /* CIF PROCEDURECALL (197, 346), (181, 35) */
                            call writeln('Buffer Overflow!');
                    enddecision;
                    /* CIF return (163, 400), (35, 35) */
                    return ;
            endprocedure;
            /* CIF START (97, 224), (70, 35) */
            START;
                /* CIF NEXTSTATE (97, 274), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (97, 274), (70, 35) */
            /* CIF Keep Specific Geode Partition 'default' */
            state wait;
                /* CIF input (0, 329), (70, 35) */
                input run;
                    /* CIF NEXTSTATE (0, 379), (71, 35) */
                    NEXTSTATE Running;
                /* CIF input (113, 329), (142, 35) */
                input saved_signal(param);
                    /* CIF PROCEDURECALL (109, 379), (149, 35) */
                    call SAVE_PARAM(param);
                    /* CIF PROCEDURECALL (82, 434), (203, 35) */
                    call writeln('Saved param:', param);
                    /* CIF NEXTSTATE (149, 484), (70, 35) */
                    NEXTSTATE wait;
            endstate;
            /* CIF state (487, 236), (71, 35) */
            /* CIF Keep Specific Geode Partition 'default' */
            state Running;
                /* CIF input (588, 291), (70, 35) */
                input Run;
                    /* CIF PROCEDURECALL (536, 341), (174, 35) */
                    call writeln('Already running');
                    /* CIF NEXTSTATE (588, 391), (70, 35) */
                    NEXTSTATE -;
                /* CIF provided (333, 291), (162, 35) */
                provided length(save_buffer) > 0;
                    /* CIF PROCEDURECALL (366, 341), (97, 35) */
                    call GET_PARAM;
                    /* CIF PROCEDURECALL (324, 391), (180, 35) */
                    call writeln('Running: ', param);
                    /* CIF NEXTSTATE (379, 441), (71, 35) */
                    NEXTSTATE Running;
            endstate;
        endprocess og;
    endblock;
endsystem;